name: CI/CD Workflow with Pylint and Pytest

on:
  push:
    branches:
      - main

jobs:
  lint:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run pylint
        run: |
          $env:PYTHONPATH = (Get-Location).Path
          pylint **/*.py || true

  test:
    runs-on: windows-latest
    needs: lint
    if: ${{ github.event.inputs.skip_tests != 'true' }}  # Only run tests if skip_tests is not true

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies for tests
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install DVC
        run: |
          python -m pip install dvc

      - name: Pull data with DVC
        run: |
          dvc pull data/diabetes.csv  # Fetch the data          

      - name: Print PYTHONPATH
        run: |
          echo $env:PYTHONPATH          

      - name: Add src to PYTHONPATH
        run: |
          $env:PYTHONPATH = (Get-Location).Path + "\src"
          echo "PYTHONPATH=$env:PYTHONPATH"  # Output PYTHONPATH for debugging

      - name: Verify Python and MLflow installation
        run: |
          python --version
          pip show mlflow

#      - name: Create mlruns folder if not exists
#        run: |
#          if (-not (Test-Path "./mlruns")) {
#            New-Item -ItemType Directory -Path "./mlruns"
#            }

      - name: Start MLflow server
        run: |
          nohup mlflow server --backend-store-uri sqlite:///mlflow.db --default-artifact-root ./mlruns --host localhost --port 5001

      - name: Start MLflow Server on port 5001
        run: |
          Start-Process mlflow -ArgumentList 'server', '--backend-store-uri', 'sqlite:///mlflow.db', '--default-artifact-root', './mlruns', '--host', 'localhost', '--port', '5001' -NoNewWindow -PassThru | Out-File -Append mlflow_server.log
          Start-Sleep -Seconds 10  # Wait for 10 seconds before checking

      - name: Wait for MLflow server to be ready
        run: |
          $url = "http://127.0.0.1:5001/api/2.0/mlflow/experiments/list"
          $isReady = $false
          $maxRetries = 5  # Increase the retries to 20
          $retryCount = 0
          while (-not $isReady -and $retryCount -lt $maxRetries) {
            try {
              $response = Invoke-RestMethod -Uri $url -Method Get -ErrorAction Stop
              $isReady = $true
            }
            catch {
              Write-Host "Waiting for MLflow server to start... Attempt $($retryCount+1) of $maxRetries"
              $retryCount++
              Start-Sleep -Seconds 15  # Increase sleep time between retries to 15 seconds
            }
          }

          if (-not $isReady) {
            Write-Host "MLflow server is still not available after $maxRetries attempts."
          }
          #Write-Host "MLflow server is ready."

      - name: Check MLflow logs
        run: |
          if (Test-Path mlflow_server.log) {
            Get-Content mlflow_server.log | Select-Object -Last 50
          } else {
            Write-Host "MLflow log file not found."
          }

      - name: Check if MLflow is running
        run: |
          netstat -an | Select-String "500"

      - name: Check MLflow server response
        run: |
          python -c "
          import requests

          url = 'http://127.0.0.1:5001/api/2.0/mlflow/experiments/list'
          try:
              response = requests.get(url)
              print(f'Status Code: {response.status_code}')
              print(f'Response Body: {response.text}')
          except requests.exceptions.RequestException as e:
              print(f'Error: {e}')
              exit(1)
          "          

      - name: Run tests with PYTHONPATH
        run: |
          $env:PYTHONPATH = "$(Get-Location)\src"
          pytest src/tests --disable-warnings
